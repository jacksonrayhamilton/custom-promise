<%= envSettings %>/* eslint-disable callback-return, no-implicit-globals, no-plusplus, no-shadow, strict */
<%= globalSettings %>/* exported p */

<% if (wrap) { %>var p = (function () {

<% } %>  var p = function <% if (nfe) { %>p <% } %>(executor) {

    // Truthy flag to prevent multiple fulfillments or rejections.
    var fulfilledOrRejected;

    // Fulfilled state is 1, rejected is 2.
    var state;

    // Final value of the promise.
    var valueOrReason;

    // Pending handlers for `then`.
    var callbacks = [];

    // Execute all pending handlers asynchronously.
    var callCallbacks = function () {
      var callback;
      while ((callback = callbacks.shift())) {
        <%= task %>(callback);
      }
    };

    <% if (includeCatch) { %>// Access the current or eventual value or reason of `promise`.
    var promiseThen = <%= indentCode(then, 2) %>;

    var promise = {
      then: promiseThen,
      // Access the current or eventual reason of `promise`.
      <%= catchKey %>: function (onRejected) {<%= catchKeyComment %>
        return promiseThen(0, onRejected);
      }
    };<% } else { %>var promise = {
      // Access the current or eventual value or reason of `promise`.
      then: <%= indentCode(then, 3) %>
    };<% } %>

    // Implements the promise resolution procedure.
    var resolutionProcedure = function (x) {
      if (promise === x) {
        throw TypeError(); // eslint-disable-line new-cap
      }
      // Truthy flag to prevent multiple fulfillments or rejections.
      var called;
      var then;
      try {
        if (
          ((x && typeof x === 'object') || typeof x === 'function') &&
          typeof (then = x.then) === 'function'
        ) {
          // Try to make `promise` adopt the state of `x`, a thenable.
          then.call(x, function (y) {
            if (called) {
              return;
            }
            // Set "called" flag.
            called = 2;
            resolutionProcedure(y);
          }, function (r) {
            if (called) {
              return;
            }
            // Set rejected state while also setting "called" flag.
            called = state = 2;
            valueOrReason = r;
            callCallbacks();
          });
        } else {
          // Fulfill `promise` with `x`, a non-thenable.
          state = 1;
          valueOrReason = x;
          callCallbacks();
        }
      } catch (e) {
        // Uglify wasn't optimizing the following line for some reason.  It is
        // the same logic as in the onRejected callback above.
        // eslint-disable-next-line no-unused-expressions
        called ||
          (called = state = 2, valueOrReason = e, callCallbacks());
      }
    };

    executor(
      // Fulfill `promise` with `value`.
      function (value) {
        if (fulfilledOrRejected) {
          return;
        }
        resolutionProcedure(value);
        fulfilledOrRejected = 1;
      },
      // Reject `promise` with `reason`.
      function (reason) {
        if (fulfilledOrRejected) {
          return;
        }
        fulfilledOrRejected = state = 2;
        valueOrReason = reason;
        callCallbacks();
      }
    );

    return promise;

  };<% if (includeResolve) { %>

  // Create a promise fulfilled with `value`.
  <% if (referenceResolve) { %>var pResolve = <% } %><% if (exposeResolve) { %>p.resolve = <% } %>function (value) {
    // eslint-disable-next-line no-unused-vars
    return p(function (resolve, reject) {
      resolve(value);
    });
  };<% } %><% if (includeReject) { %>

  // Create a promise rejected with `reason`.
  p.reject = function (reason) {
    return p(function (resolve, reject) {
      reject(reason);
    });
  };<% } %><% if (includeAll && includeRace) { %>

  // Create an `all` or `race` function.
  var allRace = <%= allRace %>;<% } %><% if (includeAll) { %>

  // Create a promise fulfilled with the values of `collection` or rejected by
  // one value of `collection`, where `collection` is an [array-like] object.
  p.all = <%= all %>;<% } %><% if (includeRace) { %>

  // Create a promise fulfilled with the first value of `collection` to resolve
  // or rejected by one value of `collection`, where `collection` is an
  // [array-like] object.
  p.race = <%= race %>;<% } %><% if (wrap) { %>

  return p;

}());<% } %><% if (node) { %>

module.exports = p;<% } %>
